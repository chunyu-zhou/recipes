// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sudoku_protocol.proto

package sudoku_protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SolveRequest struct {
	Problem              string   `protobuf:"bytes,1,opt,name=problem" json:"problem,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SolveRequest) Reset()         { *m = SolveRequest{} }
func (m *SolveRequest) String() string { return proto.CompactTextString(m) }
func (*SolveRequest) ProtoMessage()    {}
func (*SolveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_sudoku_protocol_2503804d84d97227, []int{0}
}
func (m *SolveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolveRequest.Unmarshal(m, b)
}
func (m *SolveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolveRequest.Marshal(b, m, deterministic)
}
func (dst *SolveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolveRequest.Merge(dst, src)
}
func (m *SolveRequest) XXX_Size() int {
	return xxx_messageInfo_SolveRequest.Size(m)
}
func (m *SolveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SolveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SolveRequest proto.InternalMessageInfo

func (m *SolveRequest) GetProblem() string {
	if m != nil {
		return m.Problem
	}
	return ""
}

type SolveReply struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Result               string   `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SolveReply) Reset()         { *m = SolveReply{} }
func (m *SolveReply) String() string { return proto.CompactTextString(m) }
func (*SolveReply) ProtoMessage()    {}
func (*SolveReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_sudoku_protocol_2503804d84d97227, []int{1}
}
func (m *SolveReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolveReply.Unmarshal(m, b)
}
func (m *SolveReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolveReply.Marshal(b, m, deterministic)
}
func (dst *SolveReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolveReply.Merge(dst, src)
}
func (m *SolveReply) XXX_Size() int {
	return xxx_messageInfo_SolveReply.Size(m)
}
func (m *SolveReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SolveReply.DiscardUnknown(m)
}

var xxx_messageInfo_SolveReply proto.InternalMessageInfo

func (m *SolveReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *SolveReply) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*SolveRequest)(nil), "sudoku_protocol.SolveRequest")
	proto.RegisterType((*SolveReply)(nil), "sudoku_protocol.SolveReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SudokuSolver service

type SudokuSolverClient interface {
	Solve(ctx context.Context, in *SolveRequest, opts ...grpc.CallOption) (*SolveReply, error)
}

type sudokuSolverClient struct {
	cc *grpc.ClientConn
}

func NewSudokuSolverClient(cc *grpc.ClientConn) SudokuSolverClient {
	return &sudokuSolverClient{cc}
}

func (c *sudokuSolverClient) Solve(ctx context.Context, in *SolveRequest, opts ...grpc.CallOption) (*SolveReply, error) {
	out := new(SolveReply)
	err := grpc.Invoke(ctx, "/sudoku_protocol.SudokuSolver/Solve", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SudokuSolver service

type SudokuSolverServer interface {
	Solve(context.Context, *SolveRequest) (*SolveReply, error)
}

func RegisterSudokuSolverServer(s *grpc.Server, srv SudokuSolverServer) {
	s.RegisterService(&_SudokuSolver_serviceDesc, srv)
}

func _SudokuSolver_Solve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SudokuSolverServer).Solve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudoku_protocol.SudokuSolver/Solve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SudokuSolverServer).Solve(ctx, req.(*SolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SudokuSolver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sudoku_protocol.SudokuSolver",
	HandlerType: (*SudokuSolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Solve",
			Handler:    _SudokuSolver_Solve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sudoku_protocol.proto",
}

func init() {
	proto.RegisterFile("sudoku_protocol.proto", fileDescriptor_sudoku_protocol_2503804d84d97227)
}

var fileDescriptor_sudoku_protocol_2503804d84d97227 = []byte{
	// 159 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x2e, 0x4d, 0xc9,
	0xcf, 0x2e, 0x8d, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0xce, 0xcf, 0xd1, 0x03, 0x33, 0x84, 0xf8,
	0xd1, 0x84, 0x95, 0x34, 0xb8, 0x78, 0x82, 0xf3, 0x73, 0xca, 0x52, 0x83, 0x52, 0x0b, 0x4b, 0x53,
	0x8b, 0x4b, 0x84, 0x24, 0xb8, 0xd8, 0x0b, 0x8a, 0xf2, 0x93, 0x72, 0x52, 0x73, 0x25, 0x18, 0x15,
	0x18, 0x35, 0x38, 0x83, 0x60, 0x5c, 0x25, 0x13, 0x2e, 0x2e, 0xa8, 0xca, 0x82, 0x9c, 0x4a, 0x21,
	0x3e, 0x2e, 0xa6, 0xfc, 0x6c, 0xb0, 0x12, 0x8e, 0x20, 0xa6, 0xfc, 0x6c, 0x21, 0x31, 0x2e, 0xb6,
	0xa2, 0xd4, 0xe2, 0xd2, 0x9c, 0x12, 0x09, 0x26, 0xb0, 0x36, 0x28, 0xcf, 0x28, 0x94, 0x8b, 0x27,
	0x18, 0x6c, 0x25, 0x58, 0x6f, 0x91, 0x90, 0x2b, 0x17, 0x2b, 0x98, 0x25, 0x24, 0xab, 0x87, 0xee,
	0x42, 0x64, 0x77, 0x48, 0x49, 0xe3, 0x92, 0x2e, 0xc8, 0xa9, 0x54, 0x62, 0x48, 0x62, 0x03, 0x0b,
	0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x57, 0x5c, 0xcd, 0x23, 0xe7, 0x00, 0x00, 0x00,
}
