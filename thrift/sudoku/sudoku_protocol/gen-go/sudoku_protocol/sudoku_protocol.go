// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package sudoku_protocol

import (
	"bytes"
	"context"
	"reflect"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Problem
type SolveRequest struct {
  Problem string `thrift:"problem,1,required" db:"problem" json:"problem"`
}

func NewSolveRequest() *SolveRequest {
  return &SolveRequest{}
}


func (p *SolveRequest) GetProblem() string {
  return p.Problem
}
func (p *SolveRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProblem bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProblem = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProblem{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Problem is not set"));
  }
  return nil
}

func (p *SolveRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Problem = v
}
  return nil
}

func (p *SolveRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SolveRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SolveRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("problem", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:problem: ", p), err) }
  if err := oprot.WriteString(string(p.Problem)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.problem (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:problem: ", p), err) }
  return err
}

func (p *SolveRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SolveRequest(%+v)", *p)
}

// Attributes:
//  - Ok
//  - Result_
type SolveReply struct {
  Ok bool `thrift:"ok,1,required" db:"ok" json:"ok"`
  Result_ string `thrift:"result,2,required" db:"result" json:"result"`
}

func NewSolveReply() *SolveReply {
  return &SolveReply{}
}


func (p *SolveReply) GetOk() bool {
  return p.Ok
}

func (p *SolveReply) GetResult_() string {
  return p.Result_
}
func (p *SolveReply) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetOk bool = false;
  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetOk = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetResult_ = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetOk{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ok is not set"));
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *SolveReply)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Ok = v
}
  return nil
}

func (p *SolveReply)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Result_ = v
}
  return nil
}

func (p *SolveReply) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SolveReply"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SolveReply) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ok", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ok: ", p), err) }
  if err := oprot.WriteBool(bool(p.Ok)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ok (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ok: ", p), err) }
  return err
}

func (p *SolveReply) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:result: ", p), err) }
  if err := oprot.WriteString(string(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.result (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:result: ", p), err) }
  return err
}

func (p *SolveReply) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SolveReply(%+v)", *p)
}

type SudoSolver interface {
  // Parameters:
  //  - SolveRequest
  Solve(ctx context.Context, solveRequest *SolveRequest) (r *SolveReply, err error)
}

type SudoSolverClient struct {
  c thrift.TClient
}

func NewSudoSolverClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SudoSolverClient {
  return &SudoSolverClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewSudoSolverClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SudoSolverClient {
  return &SudoSolverClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewSudoSolverClient(c thrift.TClient) *SudoSolverClient {
  return &SudoSolverClient{
    c: c,
  }
}

func (p *SudoSolverClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - SolveRequest
func (p *SudoSolverClient) Solve(ctx context.Context, solveRequest *SolveRequest) (r *SolveReply, err error) {
  var _args0 SudoSolverSolveArgs
  _args0.SolveRequest = solveRequest
  var _result1 SudoSolverSolveResult
  if err = p.Client_().Call(ctx, "Solve", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

type SudoSolverProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler SudoSolver
}

func (p *SudoSolverProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *SudoSolverProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *SudoSolverProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewSudoSolverProcessor(handler SudoSolver) *SudoSolverProcessor {

  self2 := &SudoSolverProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self2.processorMap["Solve"] = &sudoSolverProcessorSolve{handler:handler}
return self2
}

func (p *SudoSolverProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x3.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x3

}

type sudoSolverProcessorSolve struct {
  handler SudoSolver
}

func (p *sudoSolverProcessorSolve) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SudoSolverSolveArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Solve", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SudoSolverSolveResult{}
var retval *SolveReply
  var err2 error
  if retval, err2 = p.handler.Solve(ctx, args.SolveRequest); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Solve: " + err2.Error())
    oprot.WriteMessageBegin("Solve", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Solve", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - SolveRequest
type SudoSolverSolveArgs struct {
  SolveRequest *SolveRequest `thrift:"solveRequest,1" db:"solveRequest" json:"solveRequest"`
}

func NewSudoSolverSolveArgs() *SudoSolverSolveArgs {
  return &SudoSolverSolveArgs{}
}

var SudoSolverSolveArgs_SolveRequest_DEFAULT *SolveRequest
func (p *SudoSolverSolveArgs) GetSolveRequest() *SolveRequest {
  if !p.IsSetSolveRequest() {
    return SudoSolverSolveArgs_SolveRequest_DEFAULT
  }
return p.SolveRequest
}
func (p *SudoSolverSolveArgs) IsSetSolveRequest() bool {
  return p.SolveRequest != nil
}

func (p *SudoSolverSolveArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SudoSolverSolveArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.SolveRequest = &SolveRequest{}
  if err := p.SolveRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SolveRequest), err)
  }
  return nil
}

func (p *SudoSolverSolveArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Solve_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SudoSolverSolveArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("solveRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:solveRequest: ", p), err) }
  if err := p.SolveRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SolveRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:solveRequest: ", p), err) }
  return err
}

func (p *SudoSolverSolveArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SudoSolverSolveArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SudoSolverSolveResult struct {
  Success *SolveReply `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSudoSolverSolveResult() *SudoSolverSolveResult {
  return &SudoSolverSolveResult{}
}

var SudoSolverSolveResult_Success_DEFAULT *SolveReply
func (p *SudoSolverSolveResult) GetSuccess() *SolveReply {
  if !p.IsSetSuccess() {
    return SudoSolverSolveResult_Success_DEFAULT
  }
return p.Success
}
func (p *SudoSolverSolveResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SudoSolverSolveResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SudoSolverSolveResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SolveReply{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SudoSolverSolveResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Solve_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SudoSolverSolveResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SudoSolverSolveResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SudoSolverSolveResult(%+v)", *p)
}


