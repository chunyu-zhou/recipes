// Code generated by protoc-gen-go. DO NOT EDIT.
// source: recharge_protocol.proto

package recharge_protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterRequest struct {
	Phone                string   `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Email                string   `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	InviteCode           string   `protobuf:"bytes,3,opt,name=invite_code,json=inviteCode,proto3" json:"invite_code,omitempty"`
	Passwd               string   `protobuf:"bytes,4,opt,name=passwd,proto3" json:"passwd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterRequest) Reset()         { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()    {}
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_recharge_protocol_99d25b75b7f0122e, []int{0}
}
func (m *RegisterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterRequest.Unmarshal(m, b)
}
func (m *RegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterRequest.Marshal(b, m, deterministic)
}
func (dst *RegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRequest.Merge(dst, src)
}
func (m *RegisterRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterRequest.Size(m)
}
func (m *RegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRequest proto.InternalMessageInfo

func (m *RegisterRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *RegisterRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *RegisterRequest) GetInviteCode() string {
	if m != nil {
		return m.InviteCode
	}
	return ""
}

func (m *RegisterRequest) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

type RegisterReply struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	UserId               string   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Msg                  string   `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterReply) Reset()         { *m = RegisterReply{} }
func (m *RegisterReply) String() string { return proto.CompactTextString(m) }
func (*RegisterReply) ProtoMessage()    {}
func (*RegisterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_recharge_protocol_99d25b75b7f0122e, []int{1}
}
func (m *RegisterReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterReply.Unmarshal(m, b)
}
func (m *RegisterReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterReply.Marshal(b, m, deterministic)
}
func (dst *RegisterReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterReply.Merge(dst, src)
}
func (m *RegisterReply) XXX_Size() int {
	return xxx_messageInfo_RegisterReply.Size(m)
}
func (m *RegisterReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterReply.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterReply proto.InternalMessageInfo

func (m *RegisterReply) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *RegisterReply) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *RegisterReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type RechargeRequest struct {
	FGoldinFlowId        string   `protobuf:"bytes,1,opt,name=f_goldin_flow_id,json=fGoldinFlowId,proto3" json:"f_goldin_flow_id,omitempty"`
	UserId               string   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Amount               string   `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RechargeRequest) Reset()         { *m = RechargeRequest{} }
func (m *RechargeRequest) String() string { return proto.CompactTextString(m) }
func (*RechargeRequest) ProtoMessage()    {}
func (*RechargeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_recharge_protocol_99d25b75b7f0122e, []int{2}
}
func (m *RechargeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RechargeRequest.Unmarshal(m, b)
}
func (m *RechargeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RechargeRequest.Marshal(b, m, deterministic)
}
func (dst *RechargeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RechargeRequest.Merge(dst, src)
}
func (m *RechargeRequest) XXX_Size() int {
	return xxx_messageInfo_RechargeRequest.Size(m)
}
func (m *RechargeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RechargeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RechargeRequest proto.InternalMessageInfo

func (m *RechargeRequest) GetFGoldinFlowId() string {
	if m != nil {
		return m.FGoldinFlowId
	}
	return ""
}

func (m *RechargeRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *RechargeRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type RechargeReply struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RechargeReply) Reset()         { *m = RechargeReply{} }
func (m *RechargeReply) String() string { return proto.CompactTextString(m) }
func (*RechargeReply) ProtoMessage()    {}
func (*RechargeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_recharge_protocol_99d25b75b7f0122e, []int{3}
}
func (m *RechargeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RechargeReply.Unmarshal(m, b)
}
func (m *RechargeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RechargeReply.Marshal(b, m, deterministic)
}
func (dst *RechargeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RechargeReply.Merge(dst, src)
}
func (m *RechargeReply) XXX_Size() int {
	return xxx_messageInfo_RechargeReply.Size(m)
}
func (m *RechargeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RechargeReply.DiscardUnknown(m)
}

var xxx_messageInfo_RechargeReply proto.InternalMessageInfo

func (m *RechargeReply) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *RechargeReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*RegisterRequest)(nil), "recharge_protocol.RegisterRequest")
	proto.RegisterType((*RegisterReply)(nil), "recharge_protocol.RegisterReply")
	proto.RegisterType((*RechargeRequest)(nil), "recharge_protocol.RechargeRequest")
	proto.RegisterType((*RechargeReply)(nil), "recharge_protocol.RechargeReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/recharge_protocol.User/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
type UserServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recharge_protocol.User/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "recharge_protocol.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _User_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recharge_protocol.proto",
}

// RechargeClient is the client API for Recharge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RechargeClient interface {
	Recharge(ctx context.Context, in *RechargeRequest, opts ...grpc.CallOption) (*RechargeReply, error)
}

type rechargeClient struct {
	cc *grpc.ClientConn
}

func NewRechargeClient(cc *grpc.ClientConn) RechargeClient {
	return &rechargeClient{cc}
}

func (c *rechargeClient) Recharge(ctx context.Context, in *RechargeRequest, opts ...grpc.CallOption) (*RechargeReply, error) {
	out := new(RechargeReply)
	err := c.cc.Invoke(ctx, "/recharge_protocol.Recharge/Recharge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RechargeServer is the server API for Recharge service.
type RechargeServer interface {
	Recharge(context.Context, *RechargeRequest) (*RechargeReply, error)
}

func RegisterRechargeServer(s *grpc.Server, srv RechargeServer) {
	s.RegisterService(&_Recharge_serviceDesc, srv)
}

func _Recharge_Recharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RechargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RechargeServer).Recharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recharge_protocol.Recharge/Recharge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RechargeServer).Recharge(ctx, req.(*RechargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Recharge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "recharge_protocol.Recharge",
	HandlerType: (*RechargeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recharge",
			Handler:    _Recharge_Recharge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recharge_protocol.proto",
}

func init() {
	proto.RegisterFile("recharge_protocol.proto", fileDescriptor_recharge_protocol_99d25b75b7f0122e)
}

var fileDescriptor_recharge_protocol_99d25b75b7f0122e = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xc1, 0x4e, 0x2a, 0x31,
	0x14, 0x86, 0x33, 0xc0, 0x9d, 0x7b, 0xe9, 0x0d, 0x8a, 0x0d, 0x81, 0x09, 0x31, 0x91, 0xcc, 0x46,
	0xc3, 0x02, 0x12, 0x5c, 0xc9, 0xd6, 0x44, 0xc3, 0x76, 0x12, 0xd7, 0x93, 0x4a, 0x3b, 0x43, 0x63,
	0xe9, 0x19, 0xdb, 0x0e, 0x84, 0xad, 0xaf, 0xe0, 0xa3, 0xf9, 0x0a, 0x3e, 0x88, 0xe9, 0xb4, 0xa8,
	0x88, 0xb0, 0x3b, 0xff, 0x7f, 0x4e, 0xfb, 0xf5, 0xef, 0x41, 0x3d, 0xc5, 0xe6, 0x0b, 0xa2, 0x72,
	0x96, 0x16, 0x0a, 0x0c, 0xcc, 0x41, 0x8c, 0xaa, 0x02, 0x9f, 0xed, 0x35, 0xfa, 0xe7, 0x39, 0x40,
	0x2e, 0xd8, 0x98, 0x14, 0x7c, 0x4c, 0xa4, 0x04, 0x43, 0x0c, 0x07, 0xa9, 0xdd, 0x81, 0x78, 0x85,
	0x4e, 0x13, 0x96, 0x73, 0x6d, 0x98, 0x4a, 0xd8, 0x73, 0xc9, 0xb4, 0xc1, 0x1d, 0xf4, 0xa7, 0x58,
	0x80, 0x64, 0x51, 0x30, 0x08, 0xae, 0x9a, 0x89, 0x13, 0xd6, 0x65, 0x4b, 0xc2, 0x45, 0x54, 0x73,
	0x6e, 0x25, 0xf0, 0x05, 0xfa, 0xcf, 0xe5, 0x8a, 0x1b, 0x96, 0xce, 0x81, 0xb2, 0xa8, 0x5e, 0xf5,
	0x90, 0xb3, 0x6e, 0x81, 0x32, 0xdc, 0x45, 0x61, 0x41, 0xb4, 0x5e, 0xd3, 0xa8, 0x51, 0xf5, 0xbc,
	0x8a, 0x13, 0xd4, 0xfa, 0xe2, 0x16, 0x62, 0x63, 0x07, 0xb5, 0x21, 0xa6, 0xd4, 0x1e, 0xeb, 0x15,
	0xee, 0xa1, 0xbf, 0xa5, 0x66, 0x2a, 0xe5, 0xd4, 0x93, 0x43, 0x2b, 0x67, 0x14, 0xb7, 0x51, 0x7d,
	0xa9, 0x73, 0x8f, 0xb4, 0x65, 0xfc, 0x64, 0xb3, 0xb8, 0xf8, 0xdb, 0x2c, 0x97, 0xa8, 0x9d, 0xa5,
	0x39, 0x08, 0xca, 0x65, 0x9a, 0x09, 0x58, 0xdb, 0x6b, 0xdc, 0xfd, 0xad, 0xec, 0xbe, 0xb2, 0xef,
	0x04, 0xac, 0x67, 0xf4, 0x30, 0xa6, 0x8b, 0x42, 0xb2, 0x84, 0x52, 0x1a, 0x4f, 0xf2, 0x2a, 0xbe,
	0xb1, 0x01, 0xb6, 0xb0, 0x63, 0x01, 0xfc, 0x3b, 0x6b, 0x9f, 0xef, 0x9c, 0x48, 0xd4, 0x78, 0xd0,
	0x4c, 0xe1, 0x0c, 0xfd, 0xdb, 0xfe, 0x01, 0x8e, 0x47, 0xfb, 0x2b, 0xfd, 0xb1, 0x98, 0xfe, 0xe0,
	0xe8, 0x4c, 0x21, 0x36, 0x71, 0xe7, 0xe5, 0xed, 0xfd, 0xb5, 0x76, 0x12, 0x37, 0xc7, 0xca, 0xfb,
	0xd3, 0x60, 0x38, 0x51, 0x96, 0xe3, 0x0e, 0x3a, 0xa6, 0xaf, 0x7f, 0x67, 0xee, 0x7c, 0xe0, 0x01,
	0xe6, 0xb7, 0xdc, 0x3b, 0x4c, 0xe7, 0x4f, 0x83, 0xe1, 0x63, 0x58, 0x4d, 0x5f, 0x7f, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x7e, 0xae, 0x78, 0x65, 0xaa, 0x02, 0x00, 0x00,
}
